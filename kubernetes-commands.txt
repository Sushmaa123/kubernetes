POD: A Pod is a smallest deployable unit of kubernetes. It represents a single instance of running a container in a cluster

Types of Pods:
Single-Container Pod (Most common) – Runs a single application container.
Multi-Container Pod – Runs multiple tightly coupled containers that share storage & network.

Creation of Pod
-----------------
apiVersion: v1
kind: Pod
metadata:
  name: pod
  labels:
    type: frontend
spec:
  containers:
    - name: app-1
      image: nginx
      ports:
        - containerPort: 80
    - name: app-2
      image: jenkins/jenkins
      ports:
        - containerPort: 8080

To run multiple pods with same port number from a single YAML file
------------------------------------------------------------------
apiVersion: v1
kind: Pod
metadata:
  name: frontend-pod-1
  labels:
    type: frontend
spec:
  containers:
    - name: app-1
      image: sushmagowda321/calci
      ports:
        - containerPort: 80
---
apiVersion: v1
kind: Pod
metadata:
  name: frontend-pod-2
  labels:
    type: frontend
spec:
  containers:
    - name: app-2
      image: sushmagowda321/barista
      ports:
        - containerPort: 80

command: kubectl apply -f pod.yaml

Commands:
----------
1.To create a pod
-->kubectl create -f pod-filename.yaml
2.To list the pods
-->kubectl get pods
3.To delete the pods
-->kubectl delete pod pod-name

ReplicationController:A Replication Controller (RC) in Kubernetes ensures that a specified number of replica pods are running at any given time. If a pod crashes or is deleted, the Replication Controller creates a new one to maintain the desired state.

Key Responsibilities:
--------------------
Ensures Availability: Maintains a constant number of running pods.
Self-Healing: If a pod fails, it automatically creates a new one.
Scaling: Allows manual scaling by updating the number of replicas.
Load Distribution: Ensures pods are distributed across available nodes.

Replication Controller vs ReplicaSet:
--------------------------------------
Replication Controller is an older resource that only supports equality-based selectors (e.g., app=web).
ReplicaSet is the modern replacement, supporting both equality- and set-based selectors (e.g., app in (web, api)).

Creation of Replication Controller
----------------------------------
apiVersion: v1
kind: ReplicationController
metadata:
  name: frontend-controller
  labels:
    app: frontend
spec:
  replicas: 3
  selector:
    app: frontend
  template:
    metadata:
      labels:
        app: frontend
    spec:
      containers:
      - name: frontend
        image: nginx

Commands:
---------
1.To create a Replication Controller
-->kubectl create -f replication-controller-filename.yaml
2.To list the replication-controller
-->kubectl get replicationcontroller

ReplicaSet: A ReplicaSet (RS) in Kubernetes ensures that a specified number of identical pod replicas are running at any given time. It is the modern replacement for the Replication Controller and provides more flexibility with label selectors.

Key Responsibilities of a ReplicaSet:
-------------------------------------
Ensures Availability: Maintains the desired number of running pods.
Self-Healing: If a pod crashes or is deleted, a new one is automatically created.
Scaling: Supports manual and autoscaling of pods.
Label-based Pod Selection: Supports both equality-based (app=web) and set-based (app in (web, api)) label selectors.

Creation of ReplicaSet
-----------------------
apiVersion: apps/v1
kind: ReplicaSet
metadata:
  name: frontend-replicaset
spec:
  replicas: 3
  selector:
    matchLabels:
      app: frontend
    matchExpressions:
    - { key: env, operator: In, values: ["prod"] }
  template:
    metadata:
      labels:
        app: frontend
        env: prod
    spec:
      containers:
      - name: frontend
        image: nginx

Commands:
-----------
1.To create replicaset
-->kubectl create -f replicaset-filename.yaml
2.To list replicaset
-->kubectl get replicaset
3.To scale up the pods
-->kubectl scale replicaset replicaset-name --replicas=6
4.To delete the replicaset
-->kubectl delete replicaset replicaset-name
note: it also deletes the pods inside it

Deployment: A Deployment in Kubernetes manages ReplicaSets to provide declarative updates for applications. It simplifies scaling, rolling updates, and rollbacks.

Key Features of Deployments:
---------------------------
Pod Management: Ensures the desired number of replicas are running.
Rolling Updates: Enables zero-downtime updates by gradually replacing old pods.
Rollback Support: Easily revert to a previous stable version if an update fails.
Self-Healing: Automatically replaces failed or deleted pods.
Scaling: Supports manual and autoscaling of pods.

Creation of Deployment
----------------------
apiVersion: apps/v1
kind: Deployment
metadata:
    name: my-deployment
    labels:
      app: frontend
spec:
   template:
      metadata:
        labels:
           app: frontend
      spec:
         containers:
            - name: myapp-container
              image: nginx
  selector:
     matchLabels:
         app: frontend
  replicas: 3

Commands:
---------
1.To create a deployment
-->kubectl create -f deployment.yaml
2.To list the deployments
-->kubectl get deplyments
3.To set the different image for the existing container
-->kubectl set image deployment/deployment-name container-name=new-image-name
4.To rollout the changes of the deployment
-->kubectl rollout undo deployment/my-deployment-name
5.To check the status of the deployment
-->kubectl rollout status deployment/my-deployment-name
6.To check the history of deployment
-->kubectl rollout history deployment/my-deployment-name
5.to see all created objects at once
-->kubectl get all

To enter inside a container
-->kubectl exec -it my-pod -- /bin/bash
to enter inside a container when we have multiple container inside a pod
-->kubectl exec -it <pod-name> -c <container-name> -- /bin/bash

Note: A Deployment is the preferred way to manage applications in Kubernetes, offering updates, rollbacks, and scaling in a simple and efficient way.

Service: In Kubernetes, a Service is a method for exposing a network application that is running as one or more Pods in your cluster.

Types of Services in Kubernetes:
----------------------------------
Kubernetes provides different types of Services based on how they expose workloads:

Service Type          Description
------------          -----------
ClusterIP (default)	  Exposes the service internally within the cluster.
NodePort	            Exposes the service on a static port on each Node’s IP.
LoadBalancer	        Provisions an external load balancer (e.g., AWS ELB, GCP LB).

example for ClusterIP:
----------------------
apiVersion: v1
kind: Service
metadata:
  name: my-clusterip-service
spec:
  selector:
    app: my-app
  ports:
    - protocol: TCP
      port: 80       # Service port
      targetPort: 8080  # Pod’s container port
  type: ClusterIP

example for NodePort:
--------------------
apiVersion: v1
kind: Service
metadata:
  name: nginx-service
spec:
  type: NodePort
  selector:
    app: frontend
  ports:
    - port: 80   # Port exposed by the service
      targetPort: 80   # Port on the container
      nodePort: 30080

example for LoadBalancer:
------------------------
apiVersion: v1
kind: Service
metadata:
  name: my-loadbalancer-service
spec:
  selector:
    app: my-app
  ports:
    - protocol: TCP
      port: 80
      targetPort: 8080
  type: LoadBalancer

commands:
-------------
1.To create a service
-->kubectl apply -f service.yaml
2.to list the services
-->kubectl get svc


Additional Commands
--------------------
Commands to get the yaml file script for pod, replication controller, replicaset, deployment, service

POD
-->kubectl run my-pod --image=nginx --dry-run=client -o yaml

REPLICATION CONTROLLER
-->write the manifest file manually then run,
kubectl apply --dry-run=client -f rc.yaml -o yaml

REPLICASET
-->write the manifest file manually then run,
kubectl apply --dry-run=client -f rs.yaml -o yaml

DEPLOYMENT
-->kubectl create deployment my-deployment --image=nginx --dry-run=client -o yaml

SERVICE
-->kubectl expose deployment my-deployment --type=ClusterIP --port=80 --target-port=80 --dry-run=client -o yaml


To get the information of kubernetes objects:
--------------------------------------------
Pod: kubectl explain pod
ReplicationController: kubectl explain rc
ReplicaSet: kubectl explain rs
Deployment: kubectl explain deployment
service: kubectl explain svc

